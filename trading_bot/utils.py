import logging
import requests
import random

from .config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, LOG_FILE


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler(LOG_FILE), logging.StreamHandler()]
)


def send_telegram_message(message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è / —á–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è,
    –∑–∞—Ç–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    text = ""

    if isinstance(message, dict):
        if 'position_closed' in message:
            pos = message['position']
            status_emoji = "üü¢" if pos['profit'] > 0 else "üî¥"
            mood_emojis = ["üéâ", "üèÜ", "üí™"] if pos['profit'] > 0 else [
                "üò¢", "‚ö†Ô∏è", "üìâ"]
            intro = random.choice([
                f"{status_emoji} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞! {status_emoji}",
                f"{random.choice(mood_emojis)} –ó–∞–∫—Ä—ã–ª–∏ –ø–æ–∑–∏—Ü–∏—é",
                f"{status_emoji} –§–∏–Ω–∞–ª ‚Äî —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            ])
            outro = random.choice(
                ["üöÄ –í–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º!", "üòä –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!", "üîÑ –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π!"])
            text = (
                f"{intro}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {pos['close_reason']}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction'].upper()}\n"
                f"–í—Ö–æ–¥ ‚Üí –í—ã—Ö–æ–¥: {pos['entry']:.2f} ‚Üí {pos['close_price']:.2f}\n"
                f"–ü—Ä–∏–±—ã–ª—å: {pos['profit']:.2f} USDT\n"
                f"{outro}"
            )

        # TP1 2\3
        elif 'position_partially_closed' in message:
            pos = message['position']
            intro = random.choice([
                "üü° –ü–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!",
                "‚úÇÔ∏è 50% –ø–æ–∑–∏—Ü–∏–∏ —Ä–µ–∑–∞–Ω—É–ª–∏",
                "üîî –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"
            ])
            outro = random.choice([
                "üîÑ –û—Å—Ç–∞–ª–æ—Å—å 50% ‚Äì –¥–µ—Ä–∂–∏–º –∫—É—Ä—Å",
                "‚öôÔ∏è SL –æ–±–Ω–æ–≤–ª—ë–Ω, –≥–æ—Ç–æ–≤—ã –∫ –¥–≤–∏–∂–µ–Ω–∏—é",
                "üìä –î–∞–ª—å—à–µ ‚Äî –±–æ–ª—å—à–µ!"
            ])
            text = (
                f"{intro}\n"
                f"–°–∏–º–≤–æ–ª: {pos.get('symbol', 'N/A')}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction'].upper()}\n"
                f"–ó–∞–∫—Ä—ã—Ç–æ: 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {pos['qty']:.4f}\n"
                f"–ù–æ–≤—ã–π SL: {pos['sl']:.2f}\n"
                f"{outro}"
            )

        # –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ TP
        elif 'position_tp' in message:
            pos = message['position']
            intro = random.choice([
                "üü¢ Take-Profit –≤—ã–ø–æ–ª–Ω–µ–Ω!",
                "üèÅ –ó–∞–∫—Ä—ã–ª–∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ TP",
                "üí∞ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏"
            ])
            outro = random.choice([
                "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "üéØ –í–∑—è–ª–∏ –ø—Ä–æ—Ñ–∏—Ç!",
                "üìà –û—Ç–ª–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥"
            ])
            text = (
                f"{intro}\n"
                f"–°–∏–º–≤–æ–ª: {pos.get('symbol', 'N/A')}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction'].upper()}\n"
                f"–í—Ö–æ–¥ ‚Üí –í—ã—Ö–æ–¥: {pos['entry']:.2f} ‚Üí {pos['close_price']:.2f}\n"
                f"–ü—Ä–∏–±—ã–ª—å: {pos['profit']:.2f} USDT\n"
                f"{outro}"
            )
            try:
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                payload = {"chat_id": TELEGRAM_CHAT_ID,
                           "text": text, "parse_mode": "HTML"}
                requests.post(url, json=payload).raise_for_status()
                logging.info(f"Telegram TP message sent: {text}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ TP-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return

        # single-TP–Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
        elif 'position_single' in message:
            pos = message['position_single']
            intro = random.choice([
                "üÜï –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è!",
                "üöÄ –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É ‚Äî –ø–æ–µ—Ö–∞–ª–∏!",
                "üåü –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"
            ])
            outro = random.choice([
                "ü§û –£–¥–∞—á–∏!",
                "üèπ –ù–∞—Ü–µ–ª–µ–Ω –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç",
                "üîç –°–ª–µ–∂—É –∑–∞ —Å–∏—Ç—É–∞—Ü–∏–µ–π"
            ])
            text = (
                f"{intro}\n"
                f"–°–∏–º–≤–æ–ª: {pos.get('symbol', 'N/A')}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction']}\n"
                f"–í—Ö–æ–¥: {pos['entry']:.2f}\n"
                f"–û–±—ä—ë–º: {pos['qty']:.4f}\n"
                f"SL: {pos['sl']:.2f}\n"
                f"TP: {pos['tp']:.2f}\n"
                f"{outro}"
            )
            try:
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                payload = {"chat_id": TELEGRAM_CHAT_ID,
                           "text": text, "parse_mode": "HTML"}
                requests.post(url, json=payload).raise_for_status()
                logging.info(f"Telegram single‚ÄêTP message sent: {text}")
            except Exception as e:
                logging.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è single‚ÄêTP: {e}")
            return

        # –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        elif 'position' in message:
            pos = message['position']
            intro = random.choice([
                "üÜï –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è!",
                "üöÄ –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É ‚Äî –ø–æ–µ—Ö–∞–ª–∏!",
                "üåü –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"
            ])
            outro = random.choice(
                ["ü§û –£–¥–∞—á–∏!", "üèπ –ù–∞—Ü–µ–ª–µ–Ω –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç", "üîç –°–ª–µ–∂—É –∑–∞ —Å–∏—Ç—É–∞—Ü–∏–µ–π"])
            text = (
                f"{intro}\n"
                f"–°–∏–º–≤–æ–ª: {pos.get('symbol', 'N/A')}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction'].upper()}\n"
                f"–í—Ö–æ–¥: {pos['entry']:.2f}\n"
                f"–û–±—ä—ë–º: {pos['qty']:.4f}\n"
                f"SL: {pos['sl']:.2f}\n"
                f"TP1: {pos['tp1']:.2f} | TP2: {pos['tp2']:.2f}\n"
                f"{outro}"
            )

        # –ø—Ä–æ—áe–µ
        else:
            text = str(message)

    else:
        text = message

    response = None
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": text,
            "parse_mode": "HTML"
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logging.info(f"Telegram message sent: {text}")
    except requests.exceptions.RequestException as e:
        status = response.status_code if response is not None else 'N/A'
        body = response.text if response is not None else 'N/A'
        logging.error(
            f"Telegram error: {e}, HTTP status: {status}, Response: {body}")
